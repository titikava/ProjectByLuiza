package uroki;

import uroki.newPackage.Dog060323;

public class MyClass060323 {
    /* существуют 4 основные концепции ООП:
    1. Инкапсуляция
    2. Наследование
    3. Полиморфизм
    4. Абстракция
        Идея инкапсуляции состоит в обеспечении невидимости деталей для пользователя в реализации. Переменные одного класса будут закрыты от другого.
    (private, protected и т.д.) А доступ к ним может быть получен только с помощью методов текущего класса. Это называется скорытием данных.
    Пример: Кофемашина (варит кофе и ты не видишь как, но кофе ты получаешь).
        В програмировании есть два распространенных понятия - инкапсуяция и сокрытие. В инкапсуяции все находится в капсуле.
    Все закрыто от внешнего мира в одной упаковке. В java в роли капсулы выступает класс. Класс содержит в себе и данные (поля класса) и
    методы для работы с этими данными. С скорытием данных нам помогают:
    1) модификаторы доступа (private, protected, default)
    2) геттеры, сеттеры (туда можно заложить проверку, что бы невозможно было ввести отрицательное число и т.п.)
    Использование инкапсуляции дает нам ряд преимуществ:
    1. Контроль за корректным состоянием объекта
    2. Удобство для пользователя за счет интерфейса (снаружи для пользователя оставляем только методы, ему достаточно вызвать их, что бы
    получить результат и совсем не нужно вникать в детали их работы)
    3. Изменения в коде не отражаются на пользователе (если поменяли в методе авто - gas - поменяли реализацию, то он все равно выполняет ту же функцию)
     */

    /*
        Наследование - это процесс, который позволяет одному классу получить свойства (переменные, методы) другого класса. Класс наследующий свойства
    другого класса называется подклассом, либо производноклассом, либо классом ребенком. Класс чьи свойства наследуются называется
    базовым классом, суперклассом или родительским классом. Что бы наследовать от класса используется ключевое слово extends.
    Когда один класс наследуется от другого в одном пакете, он наследует все неприватные и дефолтные переменные и методы суперкласса.
    (public, protected и default)
    Когда один класс наследуется от другого в разных пакетах, он наследует все неприватные (кроме дефолтных) переменные
    и методы суперкласса. (public, protected)
    Конструкторы не наследуются подклассами. Однако конструктор суперкласса вызывается при вызове конструктора подкласса.
    Вы можете получить доступ к суперклассу с помощью ключевого слова super.
     */
    public static void main(String[] args) {

        //Auto060323 auto1 = new Auto060323();
        //auto1.gas();
        //auto1.breik();

        Dog060323 dog1 = new Dog060323();

    }
}
