package uroki;


/*
---Exeptions----Исключения
Исключения это проблема возникающая во время выполнения программы. Исключения вызывают ненормальное завершение программы
Обработка исключений является мощным механизмом, который обрабатывает ошибки времени выполнения для поддержки нормального
потока приложений.
Исключения могут возникать по многим различным причинам:
- пользователь ввел неверную информацию
- файл, который должен был быть открытым - не найден
- в середине коммуникаций было потеряно сетевое соединение
- недостаток памяти и другие причины
Как видите исключения возникают при пользовательских ошибок, ошибок программиста или по причине физических ресурсов
как написанная программа должна обрабатывать все возможные исключения.

-----Обработка исключений-----
Исключения могут быть обработаны с помощью комбинаций ключевых слов try и catch
Блок try/catch размещается вокруг кода, который может сгенерировать исключения

try {
   *какой-то код*
   } catch(Exeption e) {
   *какой-то код, который обработает ошибку*
   }

   Оператор catch вовлекает объявление типа исключений, которые вы пытаетесь обработать
   Если исключения возникают в блоке try, то будет проверен следующий за ним блок catch
   Если тип возникшего исключения описан в блоке catch, то исключение передается в блок catch так же как передается аргумент
   параметра метода

   Тип Exeption может использоваться для обработки всех возможных исключений. Пример обработки ошибки при попытке получения доступа
   к несуществующему индексу массива

   -----Множество исключений-------
   throw - ключевое слово позволяет вам в ручную генерировать исключения из ваших методов. Некоторые из множества доступных
   типов исключений включают
   IndexOutOfBoundsExeption, IllegalArgumentExeption, ArithmeticExeption и другие. Например мы можем использовать исключение ArithmeticExeption
   в нашем методе, если параметр равен нулю

    Выражение trows в описании метода определяет тип исключения, который может выбрасывать метод
    Далее ключевое слово throw бросает соответствующее исключение вместе с определенным сообщением
    Множество исключений может быть определене в выражении trows с помощью разделения запятыми
    Один блок try может содержать множество блоков catch, которые отдельно обрабатывают различные исключения

    try {
    *блок кода*
    } catch (ExeptionType1 e1) {
     *какой-то код, который обработает ошибку*
    } catch (ExeptionType2 e2) {
     *какой-то код, который обработает ошибку*
    } catch (ExeptionType3 e3) {
     *какой-то код, который обработает ошибку*
    }

    Все блоки catch должны быть упорядочены от наиболее специфичных к более общим. Следом за специфическими исключениями
    вы можете использовать тип Exeption для обработки всех других исключений в последнем catch
*/

public class MyClass170423 {

    public static void main(String[] args) {
     /*   try {
            int[] a = new int[2];
            System.out.println(a[5]);
        } catch (Exception e) {
            System.out.println("Error found");
        }*/

        int c = div(3, 0);
        System.out.println(c);
    }
    /*
      Без блока try/catch этот код (в мэйн) разрушит программу т.к. a[5] не существует
    */


    public static int div(int a, int b) throws ArithmeticException {
        if (b == 0) {
            throw new ArithmeticException("Division by zero");
            //System.out.println("Division by zero");
        } else {
            return a / b;
        }
      /*  int c = -1;
        try {
            c = a / b;
        } catch (ArithmeticException e) {
            System.out.println("Div by zero");
        }
        return c;
    }*/
    }
}
